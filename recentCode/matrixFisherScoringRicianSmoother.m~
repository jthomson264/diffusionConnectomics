%%  This script is going to do smoothing using gradient descent on matrices
%   for a general DSI image.

load('~/data/mybrain/btab');
data = load_nii('~/data/mybrain/data.nii');
load('~/data/mybrain/sigmas.mat');

%   Prepare bvecs.
bvec = btab(:,2:4);
for i = 1:3
    bvec(:,i) = bvec(:,i) .* sqrt(btab(:,1));
end

intBvecs = [bvec; -bvec(2:515,:)];
intBvecs = intBvecs / max(max(intBvecs));

gridNumber = 5;
intBvecs = round(intBvecs*5) + 5 + 1;


%   I'm pulling these so I can test on small sub-images.
nx = data.hdr.dime.dim(2);
ny = data.hdr.dime.dim(3);nz = data.hdr.dime.dim(4);

nz = data.hdr.dime.dim(4);
nz = data.hdr.dime.dim(4);nz = data.hdr.dime.dim(4);


paddedDoubledData = zeros(nx,ny,nz,11,11,11);

%   Now I need to put the data into the paddedDoubledData.
for i = 2:515
    
   qx = intBvecs(i,1);
   qy = intBvecs(i,2);
   qz = intBvecs(i,3);
   
   oppqx = intBvecs(i + 514, 1);
   oppqy = intBvecs(i + 514, 2);
   oppqz = intBvecs(i + 514, 3);
   
   paddedDoubledData(:,:,:,qx, qy, qz) = data.img(:,:,:,i);
   paddedDoubledData(:,:,:,oppqx, oppqy, oppqz) = data.img(:,:,:,i);
   
   disp('Added in one scan...');
    
end


%   Now I have my awesome huge giant array of doubled and zero-padded data.
%   Cool.  Time to do shit.

%   We're going to start with a very small window.  For the very simplest
%   first approach, I'm not even using gaussian gradient descent.  This
%   isn't even a 3x3x3 gaussian kernel spatially.  It's +/- one doxel in
%   each direction.


Xs = paddedDoubledData(2:(nx-1), 2:(ny-1), 2:(nz-1), 2:10, 2:10, 2:10);
nuHats = Xs;


iterations = 10;

while (currentIteration <= iterations)
    
    

weights = 1/12;
for i = 1:12
    
    
    
    
    
    
    
    
end

end






